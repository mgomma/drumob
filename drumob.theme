<?php

/**
 * @file
 * Functions to support theming in the drumob theme.
 */

use Drupal\Core\Cache\CacheableMetadata;

/*
 * gets current theme settings array.
 */
function drumob_variables(&$variables){
  // Add cachability metadata.
  $theme_settings = \Drupal::config('drumob.settings');
  
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);

  return $theme_settings->getOriginal();
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function drumob_preprocess_html(array &$variables) {
   if (\Drupal::moduleHandler()->moduleExists('color')) {
//    _color_html_alter($variables);
  }
//  drumob_extend_variables($variables);
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function drumob_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function drumob_preprocess_page(array &$variables) {
  //get all theme variables in on array.
  $drumob_variables = drumob_variables($variables);
  $variables['logo'] = $drumob_variables['logo'];
  // Adds the set in the theme variable too√∂bar buttons
  // to the page render variables
  // Header left and right:
  $variables['back_link_title'] = $drumob_variables['back_link_title'];
  $variables['back_link_icon'] = $drumob_variables['back_link_icon'];

  $variables['region_wells'] = $drumob_variables['region_wells'];
  // footer 1-5:
  $variables['footer_buttons'] = [];
  for($i = 1; $i <= 5; $i++){
    
    $button_attr_arr = [];
    foreach(['icon', 'title', 'href'] as $attr){
      $link_key = 'link_'.$attr.'_'.$i;

      if($drumob_variables[$link_key]){
        if($attr == 'href'){
          $button_attr_arr[$attr] = drumob_footer_buttons_href_process($drumob_variables[$link_key], $variables['base_path']);
        }else{
          $button_attr_arr[$attr] = $drumob_variables[$link_key];
        }
      }
    }
    if(count($button_attr_arr) == 3){
      $variables['footer_buttons'][$i] = $button_attr_arr;
    }
  }
  $variables['show_node_heading'] = $drumob_variables['show_node_heading'];
  $variables['drumob_theme_path'] = drupal_get_path('theme', 'drumob');
  // Add the loading animation to the css inline.
  // So that it can be passed from the settings.
  $variables['show_loading_animation'] = $drumob_variables['show_loading_animation'];
  $variables['selected_animation_icon'] = $drumob_variables['animation_icon'] ? $drumob_variables['animation_icon'] : 'loading1';

  // Add the navmenu font size to the css inline.
  // So that it can be passed from the settings.
  $variables['navmenu_font_size_css'] = $drumob_variables['navmenu_font_size'] ? $drumob_variables['navmenu_font_size'] : 0;

  if ($drumob_variables['show_footer_on_mobile_only']) {
    $variables['footer_mobile_visibility'] = 'visible-xs visible-sm';
  }
}

//process footer buttons href
function drumob_footer_buttons_href_process($href, $base_path){
  if(strstr($href, 'http://') || strstr($href, 'https://')){
    return $href;
    }
    else if($href == '<front>'){
      return \Drupal\Core\Url::fromRoute('<front>')->toString();
    }
    else{
      return $base_path.$href;
    }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function drumob_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function drumob_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function drumob_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function drumob_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function drumob_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function drumob_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function drumob_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function drumob_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function drumob_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function drumob_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function drumob_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function drumob_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function drumob_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
